═══════════════════════════════════════════════════════════════
                    WAN BRICKS - FILE INDEX
═══════════════════════════════════════════════════════════════

📦 ОСНОВНОЙ МОДУЛЬ
  ✓ wan_bricks.py                    - Основной модуль с 5 функциями

📚 ДОКУМЕНТАЦИЯ
  ✓ README_WAN.md                    - Подробная документация
  ✓ WAN_COMPONENTS_SUMMARY.md        - Краткая справочная таблица
  ✓ WAN_WORKFLOW_DIAGRAM.md          - Визуальные диаграммы workflow
  ✓ WAN_IMPLEMENTATION_SUMMARY.md    - Сводка реализации
  ✓ WAN_FILES_INDEX.txt              - Этот файл

🧪 ТЕСТИРОВАНИЕ
  ✓ test_wan_bricks.py               - Тестовый скрипт

📝 ОБНОВЛЕНИЯ
  ✓ README.md                        - Обновлен (добавлена секция Wan)

═══════════════════════════════════════════════════════════════
                    БЫСТРЫЙ СТАРТ
═══════════════════════════════════════════════════════════════

1️⃣  Проверить импорты:
    python test_wan_bricks.py

2️⃣  Прочитать документацию:
    cat README_WAN.md

3️⃣  Посмотреть примеры:
    cat WAN_COMPONENTS_SUMMARY.md

4️⃣  Изучить workflow:
    cat WAN_WORKFLOW_DIAGRAM.md

═══════════════════════════════════════════════════════════════
                    КОМПОНЕНТЫ (5 шт)
═══════════════════════════════════════════════════════════════

1. load_clip_vision(clip_name)
   → CLIP Vision model

2. clip_vision_encode(clip_vision, image, crop='center')
   → CLIP_VISION_OUTPUT

3. load_vae(vae_name)
   → VAE model

4. load_clip(clip_name, clip_type='wan', device='default')
   → CLIP text encoder (supports GGUF!)

5. wan_image_to_video(positive, negative, vae, ...)
   → (positive, negative, latent)

═══════════════════════════════════════════════════════════════
                    ПРИМЕР ИСПОЛЬЗОВАНИЯ
═══════════════════════════════════════════════════════════════

from bricks.wan_bricks import (
    load_clip, load_clip_vision, clip_vision_encode,
    load_vae, wan_image_to_video
)

# Загрузка моделей
clip = load_clip("umt5_xxl.safetensors", clip_type="wan")
clip_vision = load_clip_vision("clip_vision_g.safetensors")
vae = load_vae("wan_2.1_vae.safetensors")

# Кодирование
positive = clip_encode(clip, "a cat walking")
negative = clip_encode(clip, "blurry")
clip_vision_output = clip_vision_encode(clip_vision, image)

# Подготовка видео
positive, negative, latent = wan_image_to_video(
    positive, negative, vae,
    width=832, height=480, length=81,
    clip_vision_output=clip_vision_output,
    start_image=first_frame
)

# Генерация и декодирование...

═══════════════════════════════════════════════════════════════
