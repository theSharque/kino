Kino – Unified Project Context
Last Updated: 2025-10-18

Overview
- SPA to manage projects and generate image frames/videos with SDXL and Wan22-I2V plugins.
- Monorepo: backend (Python/aiohttp) + frontend (React/TypeScript).

Tech & Runtime
- Backend: Python 3.12, aiohttp, aiosqlite, Pydantic v2, PyTorch, ComfyUI integrated.
- Frontend: React + TypeScript (Vite).
- Realtime: WebSocket ws://localhost:8000/ws (2s metrics, 10s heartbeat).

How to Run
- Backend: cd backend && source venv/bin/activate && python main.py  (logs: backend/server.log)
- Frontend: cd frontend && npm install && npm run dev
- API base: http://localhost:8000

Storage & Paths
- Database: backend/data/kino.db (SQLite)
- Frames: backend/data/frames (.png + .json sidecar)
- Models: backend/models_storage

Generation Plugins
SDXL plugin:
- Filenames: task_{task_id}_{timestamp}.png
- Parameters JSON: same basename with .json next to the image
- Preview: same .png file used for preview and final; overwritten each step and on completion (no "_preview" suffix)
- Params saving: save_generation_params is async, uses keyword args; for regeneration pass frame_id and await

Wan22-I2V plugin (Image-to-Video):
- Pipeline: 9-step I2V generation with CLIP Vision, VAE, Text Encoder (GGUF), dual KSampler (HIGH/LOW)
- Models: GGUF quantized (wan2.2_i2v_high_noise_14B_Q6_K.gguf, wan2.2_i2v_low_noise_14B_Q6_K.gguf)
- Filenames: project_{project_id}_frame_{frame_id}_variant_{variant_id}_seq_{seq:03d}.png (sequential frames)
- Frame count: 1 + X * 4 (e.g., 5, 9, 13, 17, ..., 81, ..., 121 frames)
- LoRAs: Separate high_loras and low_loras (applied to respective models, strength_model only)
- System LoRAs: FusionX + Lightning I2V (HIGH/LOW) from SysLora folder
- Constants: cfg_scale=1.0, steps=4, ModelSamplingSD3 shift=8
- Memory optimization: JIT model loading before each KSampler
- Output: High-quality PNG sequence (no video encoding)
- Default negative prompt: "vivid colors, overexposed, static, blurry details, subtitles, style, artwork, painting, picture, still, overall gray, worst quality, low quality, JPEG artifacts, ugly, incomplete, extra fingers, poorly drawn hands, poorly drawn face, deformed, disfigured, malformed limbs, fused fingers, static frame, cluttered background, three legs, walking backwards, slow motion, slowmo"

Frontend Behavior
- On generation_started: add frame to refresh set; reload preview every 1s with cache-busting (?t=timestamp)
- On generation_completed: stop auto-refresh

Frontend Debug Logs
- Logger: src/lib/logger.ts (levels: debug/info/warn/error; controlled by VITE_LOG_LEVEL)
- Enable verbose logs: npm run dev:debug (sets VITE_LOG_LEVEL=debug)
- Production default: info (override via env)

API (v1 highlights)
- Projects: /api/v1/projects, /api/v1/projects/{id}
- Frames: /api/v1/frames, /api/v1/frames/{id}
- Generator tasks: /api/v1/generator/tasks, /api/v1/generator/tasks/{id}

Deletion Semantics
- Delete project: cascades frames, removes .png and .json files
- Delete frame: removes its files and DB row

Testing Defaults
- width=512, height=512, steps=5–10

Current Status / Fixes
- Project deletion confirmed OK; historical orphans cleaned
- Fixed save_generation_params (async + FrameService), updated plugin calls
- Preview logs every step; frontend auto-refresh confirmed (1s)
- Removed "_preview" suffix everywhere; unified naming
- Added Wan22-I2V plugin (2025-10-18):
  * Full I2V pipeline with GGUF models
  * Dual KSampler (HIGH/LOW noise) with ModelSamplingSD3
  * User-configurable LoRAs (high_loras/low_loras)
  * Sequential PNG frame output (no video encoding)
  * Frontend modal with LoRA UI (Wan22LoraListField component)
  * Added load_lora_model_only to comfy_bricks

Rules for AI Assistance
- ALWAYS read this CONTEXT before coding.
- ALWAYS use MCP Context7 for library documentation (aiohttp, aiohttp-pydantic, Pydantic v2, PyTorch, React, Vite). Do not guess APIs; fetch docs.
- Keep backend/frontend models in sync; follow naming conventions.
- Test new endpoints with curl; keep changes minimal and consistent.

Smoke Tests Protocol
- When user asks to run smoke tests (in any form), follow /qs/kino/SMOKE_TEST.md strictly and sequentially.
- Execute in order: Pre-Test Setup → Test 1 (start servers) → Test 2 (create project) → Test 3 (single frame) → Test 4 (5 variants) → Test 5 (delete frame) → Test 6 (delete project) → Post-Test Cleanup.
- Use specific commands from SMOKE_TEST.md: pkill for stopping servers, source venv/bin/activate for backend, monitor logs in backend/server.log and frontend/frontend.log.
- All tests are interdependent and must be run in sequence; do not skip or reorder.
